<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta http-equiv="X-UA-Compatible" content="IE=edge">
        <meta name="viewport" content="initial-scale=1,user-scalable=no,maximum-scale=1,width=device-width">
        <meta name="mobile-web-app-capable" content="yes">
        <meta name="apple-mobile-web-app-capable" content="yes">
        <link rel="stylesheet" href="css/leaflet.css">
        <link rel="stylesheet" href="css/L.Control.Layers.Tree.css">
        <link rel="stylesheet" href="css/qgis2web.css">
        <link rel="stylesheet" href="css/fontawesome-all.min.css">
        <link rel="stylesheet" href="css/leaflet.photon.css">
        <link rel="stylesheet" href="css/leaflet-measure.css">
        <style>
        html, body, #map {
            width: 100%;
            height: 100%;
            padding: 0;
            margin: 0;
        }
        </style>
        <title></title>
    </head>
    <body>
        <div id="map">
        </div>
        <script src="js/qgis2web_expressions.js"></script>
        <script src="js/leaflet.js"></script>
        <script src="js/L.Control.Layers.Tree.min.js"></script>
        <script src="js/leaflet.rotatedMarker.js"></script>
        <script src="js/leaflet.pattern.js"></script>
        <script src="js/leaflet-hash.js"></script>
        <script src="js/Autolinker.min.js"></script>
        <script src="js/rbush.min.js"></script>
        <script src="js/labelgun.min.js"></script>
        <script src="js/labels.js"></script>
        <script src="js/leaflet.photon.js"></script>
        <script src="js/leaflet-measure.js"></script>
        <script src="data/Gcell_surabaya_1.js"></script>
        <script src="data/NewBadspotBorder_2.js"></script>
        <script src="data/SINR_3.js"></script>
        <script>
        var highlightLayer;
        function highlightFeature(e) {
            highlightLayer = e.target;

            if (e.target.feature.geometry.type === 'LineString' || e.target.feature.geometry.type === 'MultiLineString') {
              highlightLayer.setStyle({
                color: '#ffff00',
              });
            } else {
              highlightLayer.setStyle({
                fillColor: '#ffff00',
                fillOpacity: 1
              });
            }
            highlightLayer.openPopup();
        }
        var map = L.map('map', {
            zoomControl:false, maxZoom:28, minZoom:1
        }).fitBounds([[-7.390778188023365,112.59733400515297],[-7.198713437523384,112.88157112069193]]);
        var hash = new L.Hash(map);
        map.attributionControl.setPrefix('<a href="https://github.com/tomchadwin/qgis2web" target="_blank">qgis2web</a> &middot; <a href="https://leafletjs.com" title="A JS library for interactive maps">Leaflet</a> &middot; <a href="https://qgis.org">QGIS</a>');
        var autolinker = new Autolinker({truncate: {length: 30, location: 'smart'}});
        // remove popup's row if "visible-with-data"
        function removeEmptyRowsFromPopupContent(content, feature) {
         var tempDiv = document.createElement('div');
         tempDiv.innerHTML = content;
         var rows = tempDiv.querySelectorAll('tr');
         for (var i = 0; i < rows.length; i++) {
             var td = rows[i].querySelector('td.visible-with-data');
             var key = td ? td.id : '';
             if (td && td.classList.contains('visible-with-data') && feature.properties[key] == null) {
                 rows[i].parentNode.removeChild(rows[i]);
             }
         }
         return tempDiv.innerHTML;
        }
        // add class to format popup if it contains media
		function addClassToPopupIfMedia(content, popup) {
			var tempDiv = document.createElement('div');
			tempDiv.innerHTML = content;
			if (tempDiv.querySelector('td img')) {
				popup._contentNode.classList.add('media');
					// Delay to force the redraw
					setTimeout(function() {
						popup.update();
					}, 10);
			} else {
				popup._contentNode.classList.remove('media');
			}
		}
        var zoomControl = L.control.zoom({
            position: 'topleft'
        }).addTo(map);
        var measureControl = new L.Control.Measure({
            position: 'topleft',
            primaryLengthUnit: 'meters',
            secondaryLengthUnit: 'kilometers',
            primaryAreaUnit: 'sqmeters',
            secondaryAreaUnit: 'hectares'
        });
        measureControl.addTo(map);
        document.getElementsByClassName('leaflet-control-measure-toggle')[0].innerHTML = '';
        document.getElementsByClassName('leaflet-control-measure-toggle')[0].className += ' fas fa-ruler';
        var bounds_group = new L.featureGroup([]);
        function setBounds() {
        }
        map.createPane('pane_OpenStreetMap_0');
        map.getPane('pane_OpenStreetMap_0').style.zIndex = 400;
        var layer_OpenStreetMap_0 = L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            pane: 'pane_OpenStreetMap_0',
            opacity: 1.0,
            attribution: '',
            minZoom: 1,
            maxZoom: 28,
            minNativeZoom: 0,
            maxNativeZoom: 19
        });
        layer_OpenStreetMap_0;
        map.addLayer(layer_OpenStreetMap_0);
        function pop_Gcell_surabaya_1(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Site_ID'] !== null ? autolinker.link(String(feature.properties['Site_ID']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NE_id'] !== null ? autolinker.link(String(feature.properties['NE_id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NodeB_ID'] !== null ? autolinker.link(String(feature.properties['NodeB_ID']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['OSS_LTE_eNodeB_name'] !== null ? autolinker.link(String(feature.properties['OSS_LTE_eNodeB_name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['OSS_LTE_eNodeB__Cell_name'] !== null ? autolinker.link(String(feature.properties['OSS_LTE_eNodeB__Cell_name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Planning_LTE_eNodeB_cell_id'] !== null ? autolinker.link(String(feature.properties['Planning_LTE_eNodeB_cell_id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Sector'] !== null ? autolinker.link(String(feature.properties['Sector']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Cell_id'] !== null ? autolinker.link(String(feature.properties['Cell_id']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NodeB_ID_ECI'] !== null ? autolinker.link(String(feature.properties['NodeB_ID_ECI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Site_type'] !== null ? autolinker.link(String(feature.properties['Site_type']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Cell_Type'] !== null ? autolinker.link(String(feature.properties['Cell_Type']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Longitude'] !== null ? autolinker.link(String(feature.properties['Longitude']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Latitude'] !== null ? autolinker.link(String(feature.properties['Latitude']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Antenna_Height'] !== null ? autolinker.link(String(feature.properties['Antenna_Height']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Azimuth'] !== null ? autolinker.link(String(feature.properties['Azimuth']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Antenna_Type'] !== null ? autolinker.link(String(feature.properties['Antenna_Type']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['E_DownTilt'] !== null ? autolinker.link(String(feature.properties['E_DownTilt']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['M_DownTilt'] !== null ? autolinker.link(String(feature.properties['M_DownTilt']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Status_LTE'] !== null ? autolinker.link(String(feature.properties['Status_LTE']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['OA_Date'] !== null ? autolinker.link(String(feature.properties['OA_Date']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Band'] !== null ? autolinker.link(String(feature.properties['Band']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['UL_EARFCN'] !== null ? autolinker.link(String(feature.properties['UL_EARFCN']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['DL_EARFCN'] !== null ? autolinker.link(String(feature.properties['DL_EARFCN']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Bandwidth__Mhz_'] !== null ? autolinker.link(String(feature.properties['Bandwidth__Mhz_']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MME'] !== null ? autolinker.link(String(feature.properties['MME']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MNC'] !== null ? autolinker.link(String(feature.properties['MNC']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MCC'] !== null ? autolinker.link(String(feature.properties['MCC']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Frequency_band'] !== null ? autolinker.link(String(feature.properties['Frequency_band']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['PCI'] !== null ? autolinker.link(String(feature.properties['PCI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MOd3'] !== null ? autolinker.link(String(feature.properties['MOd3']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Ncs'] !== null ? autolinker.link(String(feature.properties['Ncs']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['RootSequenceIndex'] !== null ? autolinker.link(String(feature.properties['RootSequenceIndex']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['TAL'] !== null ? autolinker.link(String(feature.properties['TAL']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['TAC'] !== null ? autolinker.link(String(feature.properties['TAC']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Radius__m_'] !== null ? autolinker.link(String(feature.properties['Radius__m_']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['RS_Power_config__dBm____PA___PB'] !== null ? autolinker.link(String(feature.properties['RS_Power_config__dBm____PA___PB']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Cell_trans___rec_mode'] !== null ? autolinker.link(String(feature.properties['Cell_trans___rec_mode']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['District'] !== null ? autolinker.link(String(feature.properties['District']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['District_Standard_Code'] !== null ? autolinker.link(String(feature.properties['District_Standard_Code']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Sitename'] !== null ? autolinker.link(String(feature.properties['Sitename']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Clutter'] !== null ? autolinker.link(String(feature.properties['Clutter']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Address'] !== null ? autolinker.link(String(feature.properties['Address']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Kecamatan'] !== null ? autolinker.link(String(feature.properties['Kecamatan']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Kabupaten'] !== null ? autolinker.link(String(feature.properties['Kabupaten']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['NOP'] !== null ? autolinker.link(String(feature.properties['NOP']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Branch'] !== null ? autolinker.link(String(feature.properties['Branch']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Beam'] !== null ? autolinker.link(String(feature.properties['Beam']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Length'] !== null ? autolinker.link(String(feature.properties['Length']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Carrier'] !== null ? autolinker.link(String(feature.properties['Carrier']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Beam_2'] !== null ? autolinker.link(String(feature.properties['Beam_2']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Length_2'] !== null ? autolinker.link(String(feature.properties['Length_2']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Beam_3'] !== null ? autolinker.link(String(feature.properties['Beam_3']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Length_3'] !== null ? autolinker.link(String(feature.properties['Length_3']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Beam_4'] !== null ? autolinker.link(String(feature.properties['Beam_4']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Length_4'] !== null ? autolinker.link(String(feature.properties['Length_4']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_Gcell_surabaya_1_0(feature) {
            switch(String(feature.properties['Band'])) {
                case 'L1800':
                    return {
                pane: 'pane_Gcell_surabaya_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(0,241,254,1.0)',
                interactive: true,
            }
                    break;
                case 'L2100':
                    return {
                pane: 'pane_Gcell_surabaya_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(1,26,255,1.0)',
                interactive: true,
            }
                    break;
                case 'L900':
                    return {
                pane: 'pane_Gcell_surabaya_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(213,180,60,1.0)',
                interactive: true,
            }
                    break;
                case 'NBIOT':
                    return {
                pane: 'pane_Gcell_surabaya_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(233,73,180,1.0)',
                interactive: true,
            }
                    break;
                case 'L2300':
                    return {
                pane: 'pane_Gcell_surabaya_1',
                opacity: 1,
                color: 'rgba(35,35,35,1.0)',
                dashArray: '',
                lineCap: 'butt',
                lineJoin: 'miter',
                weight: 1.0, 
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(247,1,255,1.0)',
                interactive: true,
            }
                    break;
            }
        }
        map.createPane('pane_Gcell_surabaya_1');
        map.getPane('pane_Gcell_surabaya_1').style.zIndex = 401;
        map.getPane('pane_Gcell_surabaya_1').style['mix-blend-mode'] = 'normal';
        var layer_Gcell_surabaya_1 = new L.geoJson(json_Gcell_surabaya_1, {
            attribution: '',
            interactive: true,
            dataVar: 'json_Gcell_surabaya_1',
            layerName: 'layer_Gcell_surabaya_1',
            pane: 'pane_Gcell_surabaya_1',
            onEachFeature: pop_Gcell_surabaya_1,
            style: style_Gcell_surabaya_1_0,
        });
        bounds_group.addLayer(layer_Gcell_surabaya_1);
        map.addLayer(layer_Gcell_surabaya_1);
        function pop_NewBadspotBorder_2(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Name'] !== null ? autolinker.link(String(feature.properties['Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['BS_Type'] !== null ? autolinker.link(String(feature.properties['BS_Type']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['BS_Type_IOH'] !== null ? autolinker.link(String(feature.properties['BS_Type_IOH']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['BS_BM'] !== null ? autolinker.link(String(feature.properties['BS_BM']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Status_BS'] !== null ? autolinker.link(String(feature.properties['Status_BS']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Issue_Category'] !== null ? autolinker.link(String(feature.properties['Issue_Category']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Badspot_Kategori'] !== null ? autolinker.link(String(feature.properties['Badspot_Kategori']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['RCI'] !== null ? autolinker.link(String(feature.properties['RCI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['RHI'] !== null ? autolinker.link(String(feature.properties['RHI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_NewBadspotBorder_2_0() {
            return {
                pane: 'pane_NewBadspotBorder_2',
                opacity: 1,
                color: 'rgba(53,121,177,1.0)',
                dashArray: '',
                lineCap: 'square',
                lineJoin: 'bevel',
                weight: 4.0,
                fillOpacity: 0,
                interactive: true,
            }
        }
        map.createPane('pane_NewBadspotBorder_2');
        map.getPane('pane_NewBadspotBorder_2').style.zIndex = 402;
        map.getPane('pane_NewBadspotBorder_2').style['mix-blend-mode'] = 'normal';
        var layer_NewBadspotBorder_2 = new L.geoJson(json_NewBadspotBorder_2, {
            attribution: '',
            interactive: true,
            dataVar: 'json_NewBadspotBorder_2',
            layerName: 'layer_NewBadspotBorder_2',
            pane: 'pane_NewBadspotBorder_2',
            onEachFeature: pop_NewBadspotBorder_2,
            style: style_NewBadspotBorder_2_0,
        });
        bounds_group.addLayer(layer_NewBadspotBorder_2);
        map.addLayer(layer_NewBadspotBorder_2);
        function pop_SINR_3(feature, layer) {
            layer.on({
                mouseout: function(e) {
                    for (var i in e.target._eventParents) {
                        if (typeof e.target._eventParents[i].resetStyle === 'function') {
                            e.target._eventParents[i].resetStyle(e.target);
                        }
                    }
                    if (typeof layer.closePopup == 'function') {
                        layer.closePopup();
                    } else {
                        layer.eachLayer(function(feature){
                            feature.closePopup()
                        });
                    }
                },
                mouseover: highlightFeature,
            });
            var popupContent = '<table>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['File Name'] !== null ? autolinker.link(String(feature.properties['File Name']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Time'] !== null ? autolinker.link(String(feature.properties['Time']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['MS'] !== null ? autolinker.link(String(feature.properties['MS']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Longitude'] !== null ? autolinker.link(String(feature.properties['Longitude']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Latitude'] !== null ? autolinker.link(String(feature.properties['Latitude']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['Height(m)'] !== null ? autolinker.link(String(feature.properties['Height(m)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC Serving RSRP(dBm)'] !== null ? autolinker.link(String(feature.properties['LTE PCC Serving RSRP(dBm)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC1 Serving RSRP(dBm)'] !== null ? autolinker.link(String(feature.properties['LTE SCC1 Serving RSRP(dBm)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC2 Serving RSRP(dBm)'] !== null ? autolinker.link(String(feature.properties['LTE SCC2 Serving RSRP(dBm)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC Serving RSRQ(dB)'] !== null ? autolinker.link(String(feature.properties['LTE PCC Serving RSRQ(dB)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC Serving SINR(dB)'] !== null ? autolinker.link(String(feature.properties['LTE PCC Serving SINR(dB)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC Serving PCI'] !== null ? autolinker.link(String(feature.properties['LTE PCC Serving PCI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC1 Serving PCI'] !== null ? autolinker.link(String(feature.properties['LTE SCC1 Serving PCI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC2 Serving PCI'] !== null ? autolinker.link(String(feature.properties['LTE SCC2 Serving PCI']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC Serving EARFCN'] !== null ? autolinker.link(String(feature.properties['LTE PCC Serving EARFCN']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC1 Serving EARFCN'] !== null ? autolinker.link(String(feature.properties['LTE SCC1 Serving EARFCN']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE SCC2 Serving EARFCN'] !== null ? autolinker.link(String(feature.properties['LTE SCC2 Serving EARFCN']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC DL RLC Throughput(kbps)'] !== null ? autolinker.link(String(feature.properties['LTE PCC DL RLC Throughput(kbps)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE PCC UL RLC Throughput(kbps)'] !== null ? autolinker.link(String(feature.properties['LTE PCC UL RLC Throughput(kbps)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['RF Mode'] !== null ? autolinker.link(String(feature.properties['RF Mode']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                    <tr>\
                        <td colspan="2">' + (feature.properties['LTE ECI(eNodeB ID/Cell ID)'] !== null ? autolinker.link(String(feature.properties['LTE ECI(eNodeB ID/Cell ID)']).replace(/'/g, '\'').toLocaleString()) : '') + '</td>\
                    </tr>\
                </table>';
            var content = removeEmptyRowsFromPopupContent(popupContent, feature);
			layer.on('popupopen', function(e) {
				addClassToPopupIfMedia(content, e.popup);
			});
			layer.bindPopup(content, { maxHeight: 400 });
        }

        function style_SINR_3_0(feature) {
            if (feature.properties['LTE PCC Serving SINR(dB)'] >= -20.000000 && feature.properties['LTE PCC Serving SINR(dB)'] <= -5.000000 ) {
                return {
                pane: 'pane_SINR_3',
                radius: 4.0,
                stroke: false,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(255,1,1,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['LTE PCC Serving SINR(dB)'] >= -5.000000 && feature.properties['LTE PCC Serving SINR(dB)'] <= 0.000000 ) {
                return {
                pane: 'pane_SINR_3',
                radius: 4.0,
                stroke: false,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(230,255,91,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['LTE PCC Serving SINR(dB)'] >= 0.000000 && feature.properties['LTE PCC Serving SINR(dB)'] <= 10.000000 ) {
                return {
                pane: 'pane_SINR_3',
                radius: 4.0,
                stroke: false,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(52,255,1,1.0)',
                interactive: true,
            }
            }
            if (feature.properties['LTE PCC Serving SINR(dB)'] >= 10.000000 && feature.properties['LTE PCC Serving SINR(dB)'] <= 50.000000 ) {
                return {
                pane: 'pane_SINR_3',
                radius: 4.0,
                stroke: false,
                fill: true,
                fillOpacity: 1,
                fillColor: 'rgba(0,34,255,1.0)',
                interactive: true,
            }
            }
        }
        map.createPane('pane_SINR_3');
        map.getPane('pane_SINR_3').style.zIndex = 403;
        map.getPane('pane_SINR_3').style['mix-blend-mode'] = 'normal';
        var layer_SINR_3 = new L.geoJson(json_SINR_3, {
            attribution: '',
            interactive: true,
            dataVar: 'json_SINR_3',
            layerName: 'layer_SINR_3',
            pane: 'pane_SINR_3',
            onEachFeature: pop_SINR_3,
            pointToLayer: function (feature, latlng) {
                var context = {
                    feature: feature,
                    variables: {}
                };
                return L.circleMarker(latlng, style_SINR_3_0(feature));
            },
        });
        bounds_group.addLayer(layer_SINR_3);
        map.addLayer(layer_SINR_3);
        var overlaysTree = [
            {label: 'SINR<br /><table><tr><td style="text-align: center;"><img src="legend/SINR_3_20to50.png" /></td><td>-20 to -5</td></tr><tr><td style="text-align: center;"><img src="legend/SINR_3_5to01.png" /></td><td>-5 to 0</td></tr><tr><td style="text-align: center;"><img src="legend/SINR_3_0to102.png" /></td><td>0 to 10</td></tr><tr><td style="text-align: center;"><img src="legend/SINR_3_10to503.png" /></td><td>10 to 50</td></tr></table>', layer: layer_SINR_3},
            {label: '<img src="legend/NewBadspotBorder_2.png" /> New Badspot Border', layer: layer_NewBadspotBorder_2},
            {label: 'Gcell_surabaya<br /><table><tr><td style="text-align: center;"><img src="legend/Gcell_surabaya_1_L18000.png" /></td><td>L1800</td></tr><tr><td style="text-align: center;"><img src="legend/Gcell_surabaya_1_L21001.png" /></td><td>L2100</td></tr><tr><td style="text-align: center;"><img src="legend/Gcell_surabaya_1_L9002.png" /></td><td>L900</td></tr><tr><td style="text-align: center;"><img src="legend/Gcell_surabaya_1_NBIOT3.png" /></td><td>NBIOT</td></tr><tr><td style="text-align: center;"><img src="legend/Gcell_surabaya_1_L23004.png" /></td><td>L2300</td></tr></table>', layer: layer_Gcell_surabaya_1},
            {label: "OpenStreetMap", layer: layer_OpenStreetMap_0},]
        var lay = L.control.layers.tree(null, overlaysTree,{
            //namedToggle: true,
            //selectorBack: false,
            //closedSymbol: '&#8862; &#x1f5c0;',
            //openedSymbol: '&#8863; &#x1f5c1;',
            //collapseAll: 'Collapse all',
            //expandAll: 'Expand all',
            collapsed: true,
        });
        lay.addTo(map);
        setBounds();
        var i = 0;
        layer_NewBadspotBorder_2.eachLayer(function(layer) {
            var context = {
                feature: layer.feature,
                variables: {}
            };
            layer.bindTooltip((layer.feature.properties['Name'] !== null?String('<div style="color: #323232; font-size: 10pt; font-family: \'Arial\', sans-serif;">' + layer.feature.properties['Name']) + '</div>':''), {permanent: true, offset: [-0, -16], className: 'css_NewBadspotBorder_2'});
            labels.push(layer);
            totalMarkers += 1;
              layer.added = true;
              addLabel(layer, i);
              i++;
        });
        resetLabels([layer_NewBadspotBorder_2]);
        map.on("zoomend", function(){
            resetLabels([layer_NewBadspotBorder_2]);
        });
        map.on("layeradd", function(){
            resetLabels([layer_NewBadspotBorder_2]);
        });
        map.on("layerremove", function(){
            resetLabels([layer_NewBadspotBorder_2]);
        });
        </script>
    </body>
</html>
